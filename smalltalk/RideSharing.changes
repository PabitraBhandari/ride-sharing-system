----QUIT----2025-03-28T14:53:56.810848+01:00 Pharo12.0-SNAPSHOT-64bit-a05651321a.image priorSource: 0!----QUIT----2025-03-28T14:53:56.811521+01:00 Pharo12.0-SNAPSHOT-64bit-a05651321a.image priorSource: 0!----QUIT----2025-03-28T14:54:16.762178+01:00 Pharo12.0-SNAPSHOT-64bit-a05651321a.image priorSource: 104!----QUIT----2025-03-28T14:54:16.763103+01:00 Pharo12.0-SNAPSHOT-64bit-a05651321a.image priorSource: 208!!SettingBrowser methodsFor: 'user interface' stamp: '3/29/2025 21:07' prior: 59799152!choosePackagesIn: aWindow	"Method called when one presses the 'Choose packages' buttong.	This button restrict the set of setting to be considered. By selecting one or more packages, only the setting of these packages are displayed."	| result list |	list := MorphTreeModel new		        beCheckList;		        autoMultiSelection: true;		        rootItems:			        (self allPackagesWithSettings asArray sort: [ :a :b |					         a name < b packageName ]);		        wrapBlockOrSelector: #packageName.	result := list		          openDialogWindowIn: aWindow		          title: 'Choose packages'		          selectedtems: self viewedPackages.	result ifNotNil: [ self changePackageSet: result ]! !----QUIT/NOSAVE----2025-03-30T09:54:39.443606-05:00 RideSharing.image priorSource: 314!----QUIT/NOSAVE----2025-03-30T09:54:39.445353-05:00 RideSharing.image priorSource: 314!Object subclass: #Ride    instanceVariableNames: 'rideID pickupLocation dropoffLocation distance'    classVariableNames: ''    poolDictionaries: ''    category: 'RideSharing'.!!Ride methodsFor: 'nil' stamp: '3/30/2025 10:23'!initializeWith: id pickup: pickup dropoff: dropoff distance: dist    rideID := id.    pickupLocation := pickup.    dropoffLocation := dropoff.    distance := dist.! !!Ride methodsFor: 'nil' stamp: '3/30/2025 10:24'!rideDetails    ^ String streamContents: [:s |        s nextPutAll: 'Ride ID: ', rideID; cr.        s nextPutAll: 'From: ', pickupLocation; cr.        s nextPutAll: 'To: ', dropoffLocation; cr.        s nextPutAll: 'Distance: ', distance printString; cr].! !!Ride methodsFor: 'nil' stamp: '3/30/2025 10:24'!fare    self subclassResponsibility.! !Ride subclass: #StandardRide    instanceVariableNames: ''    classVariableNames: ''    poolDictionaries: ''    category: 'RideSharing'.!!StandardRide methodsFor: 'nil' stamp: '3/30/2025 10:29'!fare    ^ distance * 1.75.! !!StandardRide methodsFor: 'nil' stamp: '3/30/2025 10:29'!rideDetails    ^ '[Standard] ', super rideDetails.! !Ride subclass: #PremiumRide    instanceVariableNames: ''    classVariableNames: ''    poolDictionaries: ''    category: 'RideSharing'.!!PremiumRide methodsFor: 'nil' stamp: '3/30/2025 10:30'!fare    ^ distance * 2.75.! !!PremiumRide methodsFor: 'nil' stamp: '3/30/2025 10:30'!rideDetails    ^ '[Premium] ', super rideDetails.! !Object subclass: #Driver    instanceVariableNames: 'driverID name rating assignedRides'    classVariableNames: ''    poolDictionaries: ''    category: 'RideSharing'.!!Driver methodsFor: 'nil' stamp: '3/30/2025 10:45'!initializeWith: id name: n rating: r    driverID := id.    name := n.    rating := r.    assignedRides := OrderedCollection new.! !!Driver methodsFor: 'initialization' stamp: '3/30/2025 10:46'!addRide: aRide    assignedRides add: aRide.! !!Driver methodsFor: 'modifying' stamp: '3/30/2025 10:46'!getDriverInfo    ^ String streamContents: [:s |        s nextPutAll: 'Driver ID: ', driverID; cr.        s nextPutAll: 'Name: ', name; cr.        s nextPutAll: 'Rating: ', rating printString; cr.        assignedRides do: [:ride |            s nextPutAll: ride rideDetails; cr.            s nextPutAll: 'Fare: $', ride fare printString; cr.            s nextPutAll: '-----'; cr]].! !Object subclass: #Rider    instanceVariableNames: 'riderID name bookedRides'    classVariableNames: ''    poolDictionaries: ''    category: 'RideSharing'.!!Rider methodsFor: 'nil' stamp: '3/30/2025 10:50'!initializeWith: id name: n    riderID := id.    name := n.    bookedRides := OrderedCollection new.! !!Rider methodsFor: 'initialization' stamp: '3/30/2025 10:50'!requestRide: aRide    bookedRides add: aRide.! !!Rider methodsFor: 'modifying' stamp: '3/30/2025 10:51'!viewRides    ^ String streamContents: [:s |        s nextPutAll: 'Rider ID: ', riderID; cr.        s nextPutAll: 'Name: ', name; cr.        bookedRides do: [:ride |            s nextPutAll: ride rideDetails; cr.            s nextPutAll: 'Fare: $', ride fare printString; cr.            s nextPutAll: '-----'; cr]].! !!Rider methodsFor: 'printing' stamp: '3/30/2025 10:54' prior: 8617!viewRides    ^ String streamContents: [:s |        s nextPutAll: 'Rider ID: '; nextPutAll: riderID; cr;          nextPutAll: 'Name: '; nextPutAll: name; cr.        bookedRides do: [:ride |            s nextPutAll: ride rideDetails; cr;              nextPutAll: 'Fare: $'; nextPutAll: ride fare printString; cr;              nextPutAll: '-----'; cr]].! !!Ride methodsFor: 'as yet unclassified' stamp: '3/30/2025 10:57' prior: 3697!rideDetails    ^ String streamContents: [:s |        s nextPutAll: 'Ride ID: '; nextPutAll: rideID; cr;          nextPutAll: 'From: '; nextPutAll: pickupLocation; cr;          nextPutAll: 'To: '; nextPutAll: dropoffLocation; cr;          nextPutAll: 'Distance: '; nextPutAll: distance printString; cr].! !!Ride commentStamp: 'Anonymous 3/30/2025 11:02' prior: 0!"This is the base class for all types of rides. It holds common attributes like rideID, pickup/dropoff locations, and distance. Subclasses must override the fare method."!!StandardRide commentStamp: 'Anonymous 3/30/2025 11:03' prior: 0!"A subclass of Ride that represents a standard ride type. Calculates fare using a base rate per distance."!!PremiumRide commentStamp: 'Anonymous 3/30/2025 11:03' prior: 0!"A subclass of Ride representing premium rides. Overrides fare to apply a higher rate per distance."!!Driver commentStamp: 'Anonymous 3/30/2025 11:03' prior: 0!"This class models a driver in the ride-sharing system. It stores driver info and a list of assigned rides completed by the driver."!!Rider commentStamp: 'Anonymous 3/30/2025 11:03' prior: 0!"This class models a rider who can request rides. It tracks rider information and a history of booked rides."!----QUIT----2025-03-30T11:52:23.695834-05:00 RideSharing.image priorSource: 314!----QUIT----2025-03-30T11:52:23.698276-05:00 RideSharing.image priorSource: 6394!